openapi: 3.0.0
info:
  title: Node.js + MongoDB API - JWT Authentication with Refresh Tokens
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Local development server

paths:
  /api/v1/posts:
      get:
          summary: Get a list of all posts
          description: Get All Posts
          operationId: getAll
          security:
              - bearearAuth: []
          responses:
              "200":
                  description: An array of posts
                  content:
                      application/json:
                          schema:
                              type: array
                              items:
                                  type: object
                                  properties:
                                      id:
                                          type: string
                                          example: "5eb12e197e06a76ccdefc121"
                                      title:
                                          type: string
                                          example: "My first post!"
                                      createdAt:
                                          type: string
                                          example: "2021-11-08 11:25:30"
                                      updatedAt:
                                          type: string
                                          example: "2021-11-08 15:15:30"
                                      content:
                                          type: string
                                          example: "Lorem Ipsum Doler Set Amit"
              "401":
                  $ref: "#/components/responses/UnauthorizedError"
              "404":
                  $ref: "#/components/responses/NotFoundError"
      post:
        summary: Create a new post
        description: Post created with user's id
        operationId: create
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                    title:
                        type: string
                        example: "My first post!"
                    createdAt:
                        type: string
                        example: "2021-11-08 11:25:30"
                    updatedAt:
                        type: string
                        example: "2021-11-08 15:15:30"
                    content:
                        type: string
                        example: "Lorem Ipsum Doler Set Amit"
                    author:
                        type: string
                        example: "5eb12e197e06a76ccdefc121"
        responses:
          "201":
            description: Post created.
            headers:
              Location:
                description: "URL to newly created post"
                schema:
                  type: string
                  example: https://api.url/api/v1/posts/5eb12e197e06a76ccdefc121
          "400":
            description: Validation error. Bad data sent from client.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "The `title` field is too long."
  /api/v1/posts/{id}:
    parameters:
      - in: path
        name: id
        description: Post id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single post by its id
      description: Admin users can get any post, regular users can only get their posts
      operationId: getById
      security:
        - bearearAuth: []
      responses:
        "200":
          description: Details of the specified post
          content:
            application/json:
              schema:
                type: object
                properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    title:
                      type: string
                      example: "My first post!"
                    createdAt:
                      type: string
                      example: "2021-11-08 11:25:30"
                    updatedAt:
                      type: string
                      example: "2021-11-08 15:15:30"
                    content:
                      type: string
                      example: "Lorem Ipsum Doler Set Amit"
                    author:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    patch:      
      summary: Updated specified post.
      description: Admins can update any post, regular users can only update their post.
      security:
        - bearearAuth: []
      responses:
        "200":
          description: Details of the updated post
          content:
            application/json:
              schema:
                type: object
                properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    title:
                      type: string
                      example: "My first post!"
                    createdAt:
                      type: string
                      example: "2021-11-08 11:25:30"
                    updatedAt:
                      type: string
                      example: "2021-11-08 15:15:30"
                    content:
                      type: string
                      example: "Lorem Ipsum Doler Set Amit"
                    author:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Deletes a post
      description: Admin users can delete any post, regular users can only delete their posts
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Nothing is returned. 204 No Content is sent.
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /api/v1/users/authenticate:
    post:
      summary: Authenticate user credentials and return a JWT token and a cookie with a refresh token
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "jason"
                password:
                  type: string
                  example: "pass123"
              required:
                - username
                - password
      responses:
        "200":
          description: User details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  username:
                    type: string
                    example: "jason"
                  role:
                    type: string
                    example: "Admin"
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The username or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username or password is incorrect"
  /api/v1/users/refresh-token:
    post:
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: User details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  username:
                    type: string
                    example: "jason"
                  role:
                    type: string
                    example: "Admin"
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /api/v1/users/revoke-token:
    post:
      summary: Revoke a refresh token
      description: Admin users can revoke the tokens of any user, regular users can only revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked"
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /api/v1/users:
    get:
      summary: Get a list of all users
      description: Restricted to admin users.
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    firstName:
                      type: string
                      example: "Jason"
                    lastName:
                      type: string
                      example: "Watmore"
                    username:
                      type: string
                      example: "jason"
                    role:
                      type: string
                      example: "Admin"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /api/v1/users/{id}:
    parameters:
      - in: path
        name: id
        description: User id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single user by id
      description: Admin users can access any user record, regular users are restricted to their own user record.
      operationId: getUserById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  username:
                    type: string
                    example: "jason"
                  role:
                    type: string
                    example: "Admin"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /api/v1/users/{id}/refresh-tokens:
    parameters:
      - in: path
        name: id
        description: User id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a list of all refresh tokens (active and revoked) of the user with the specified id
      description: Admin users can access any user's refresh tokens, regular users are restricted to their own refresh tokens.
      operationId: getRefreshTokens
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of refresh tokens for the specified user id
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    token:
                      type: string
                      example: "79ea9a5e825da7c27d30839c89295071842f2a44b22e917aaf795126f4486509d8511c6fdedb6f1e"
                    expires:
                      type: string
                      example: "2020-06-24T03:29:13.871Z"
                    created:
                      type: string
                      example: "2020-06-17T03:29:13.871Z"
                    createdByIp:
                      type: string
                      example: "127.0.0.1"
                    isExpired:
                      type: boolean
                      example: false
                    isActive:
                      type: boolean
                      example: true
                    revoked:
                      type: string
                      example: "2020-06-17T03:29:13.871Z"
                    revokedByIp:
                      type: string
                      example: "127.0.0.1"                    
                    replacedByToken:
                      type: string
                      example: "a01d3818db64961742f249beeded65739e9c3d1019570ea48ea820d274eac607043a6cbefd23c297"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"
security:
    - bearerAuth: []